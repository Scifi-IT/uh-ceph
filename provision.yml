#!/usr/bin/ansible-playbook

---
#########################################################
# First the common first time thingies for all machines #
#########################################################

- hosts: all
  remote_user: root

  vars_files:
  - vars.yml

  tasks:
#  # Enabling firewalld
#  - name: enable firewalld
#    service: name=firewalld state=started enabled=yes
#    become: true

  - name: copy the repository gpg keys
    copy: src={{ item }} dest=/etc/pki/rpm-gpg/{{ item }} owner=root group=root
    with_items:
    - RPM-GPG-KEY-EPEL-7
    - CEPH-KEY
    become: true
    tags: repos

  - name: copy Ceph repository file
    copy: src=ceph.repo dest=/etc/yum.repos.d/ceph.repo owner=root group=root seuser=system_u serole=object_r setype=system_conf_t selevel=s0
    become: true
    tags: repos

  - name: Add EPEL repository
    yum_repository:
      name: epel
      description: EPEL packages
      baseurl: http://download.fedoraproject.org/pub/epel/$releasever/$basearch
      gpgcheck: yes
      gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7
    become: true
    tags: repos

  - name: install common packages
    yum: name={{ item }} state=latest
    with_items:
    - ntp
    - ntpdate
    - yum-plugin-priorities
    - openssh-server
    - emacs-nox
    - snappy
    - leveldb
    - gdisk
    - python-argparse
    - gperftools-libs
    - bind-utils
    - ceph
    become: true

  - name: upgrade all packages
    yum: name=* state=latest update_cache=yes
    become: true

  - name: etc hosts
    copy: src=etc_hosts dest=/etc/hosts owner=root group=root mode=0644
    become: true

  - name: Adding ceph user
    user: name="{{ ceph_user }}" comment="{{ceph_user_name}}"
    become: true

  - name: adding Ceph user to sudoers
    template: src=ceph_user.sudo.j2 dest=/etc/sudoers.d/"{{ ceph_user }}" mode=0440 owner=root group=root
    become: true

  - name: creating Ceph user's .ssh
    file: dest=/home/{{ ceph_user }}/.ssh state=directory owner="{{ ceph_user }}" group="{{ ceph_user }}" mode=0700
    become: true
    become_user: "{{ ceph_user }}"
    tags: ssh

  - name: copy sshkey script
    copy: src=authorized_keys.sh dest="{{ authorized_keys_sh }}" owner=root group=root mode=0755
    become: true
    tags: ssh

  - name: SEconfig disable
    copy: src=se_config dest=/etc/selinux/config owner=root group=root mode=0644 seuser=system_u serole=object_r setype=selinux_config_t selevel=s0
    become: true
    tags: selinux

  - name: SEconfig permissive
    selinux: state=disabled
    become: true
    tags: selinux

##################################################
# Then more special stuff for groups of machines #
##################################################

- hosts: admin
  remote_user: root

  vars_files:
  - vars.yml

  tasks:

  - name: install admin node packages
    yum: name={{ item }} state=latest
    with_items:
    - graphite-web
    - python-carbon
    - ceph-deploy
    become: true

  - name: copy graphite-web config file
    copy: src=graphite-web.conf dest=/etc/httpd/conf.d/graphite-web.conf
    become: true

  - name: set graphite-web page and runtime lib directory attributes
    file: path="{{ item }}" owner=apache group=apache recurse=yes state=directory
    with_items:
    - /usr/share/graphite/webapp
    - /var/lib/graphite-web
    become: true

  - name: set graphite-web wsgi file attributes
    file: path=/usr/share/graphite/graphite-web.wsgi owner=apache group=apache state=file
    become: true

  - name: copy graphite-web setup script
    copy: src=graphite-web-setup.sh dest=/usr/local/sbin/graphite-web-setup.sh owner=root group=root mode=0755
    become: true

  - name: run graphite-web setup script
    command: creates="/var/lib/graphite-web/provisioned" /usr/local/sbin/graphite-web-setup.sh 
    become: true
    become_user: apache

  - name: enable httpd
    service: name=httpd enabled=yes
    become: true

  - name: admin node ssh config for default user
    template: src=admin_ssh_config.j2 dest=~/.ssh/config mode=0600

  - name: Ceph user's passwordless ssh key
    command: creates=~/.ssh/id_rsa ssh-keygen -f ~/.ssh/id_rsa -P '' 
    become: true
    become_user: "{{ ceph_user }}"
    tags: ssh

  - name: Copy Ceph user's private key to the default user
    copy: remote_src=True src=/home/{{ ceph_user }}/.ssh/id_rsa dest=/home/{{ default_user }}/.ssh/id_rsa owner={{ default_user }} group={{ default_user }} mode=0600
    become: true
    tags: ssh

  - name: fetch Ceph user's public key(s)
    command: cat ~/.ssh/id_rsa.pub
    register: ssh_keys
    become: true
    become_user: "{{ ceph_user }}"
    tags: ssh

  - name: deploy Ceph user's key(s) on all nodes
    command: creates=/home/{{ ceph_user }}/.ssh/authorized_keys "{{ authorized_keys_sh }}" "{{ ssh_keys.stdout }}" 
    delegate_to: "{{item}}"
    with_items: "{{groups['all']}}"
    become: true
    become_user: "{{ ceph_user }}"
    tags: ssh

  - name: get host keys by login once into every node.
    command: creates=/home/{{ceph_user}}/.ssh/known_hosts ssh -o StrictHostKeyChecking=no "{{item}}" exit
    with_items: "{{groups['all']}}"
    become: true
    become_user: "{{ ceph_user }}"
    tags: ssh

  - name: create conf dirs for deployment
    file: path={{item}} state=directory
    with_items:
      - /home/"{{ ceph_user }}"/my-cluster
      - /home/"{{ ceph_user }}"/bin
    become: true
    become_user: "{{ ceph_user }}"
    tags: ceph-deploy

  - name: copy ceph-deploy scripts
    file: dest=/home/"{{ ceph_user }}"/bin/"{{item}}" src="{{item}}" mode=0755
    with_items:
      - ceph-deploy1.sh
      - ceph-deploy2.sh
    become: true
    become_user: "{{ ceph_user }}"
    tags: ceph-deploy

#    with_items: [ "{{groups['nodes']}}", "{{groups['clients']}}" ]
#  - name: firewalld of admin node
#    firewalld: port=6789/tcp state=enabled permanent=true
#    become: true

#- hosts: nodes
#  remote_user: root
#
#  tasks:
#  - name: firewalld of OSD nodes
#    firewalld: port=6800-7300/tcp state=enabled permanent=true
#    become: true

- hosts: admin
  remote_user: "{{ ceph_user }}"

  tasks:
  - name: First ceph deploy script
    command: /home/"{{ceph_user}}"/bin/ceph-deploy1.sh creates=/home/{{ceph_user}}/my-cluster/ceph.conf
    become: true
    tags: ceph-deploy

- hosts: node1
  remote_user: root

  tasks:
  - name: osd0 dir
    file: path=/var/local/osd0 owner=ceph group=ceph seuser=system_u serole=object_r setype=var_t selevel=s0
    become: true
    tags: ceph-deploy

- hosts: node2
  remote_user: root

  tasks:
  - name: osd1 dir
    file: path=/var/local/osd1 owner=ceph group=ceph seuser=system_u serole=object_r setype=var_t selevel=s0
    become: true
    tags: ceph-deploy

- hosts: node2
  remote_user: root

  tasks:
  - name: osd2 dir
    file: path=/var/local/osd2 owner=ceph group=ceph seuser=system_u serole=object_r setype=var_t selevel=s0
    become: true
    tags: ceph-deploy

- hosts: admin
  remote_user: "{{ ceph_user }}"

  tasks:
  - name: Second ceph deploy script
    command: /home/"{{ceph_user}}"/bin/ceph-deploy2.sh creates=/home/{{ceph_user}}/my-cluster/ceph.conf
    become: true
    tags: ceph-deploy


##############################################
# The rest is again common for all machines. #
##############################################

- hosts: all
  remote_user: root


  tasks:

  # Rebooting the cluster after provision configuration.  Without '+1'
  # (ie. one minute delay) ansible gives UNREACHABLE errors, as the
  # system shuts down before the playbook ends.  Without --no-wall
  # flag shutdown will send terminal messages, which ansible will not
  # comprehend.
  - name: restart machine
    command: /sbin/shutdown -r +1 --no-wall "First reboot"
    become: true
